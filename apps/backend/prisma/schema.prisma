// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  credits   Float    @default(100.0) // Starting credits for new users
  plan      String   @default("free") // free, pro, enterprise
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workbooks Workbook[]
  actions   Action[]

  @@index([email], name: "idx_users_email")
  @@index([clerkId], name: "idx_users_clerk_id")
  @@map("users")
}

model Workbook {
  id          String   @id @default(cuid())
  name        String
  description String?
  data        Json     // Canonical spreadsheet data in JSON format
  metadata    Json?    // Additional metadata (themes, settings, etc.)
  version     Int      @default(1)
  isPublic    Boolean  @default(false) // For future sharing functionality
  lastAccessed DateTime @default(now()) // Track usage for optimization
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner        User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  actions      Action[]
  conversations ConversationMessage[]

  // Indexes
  @@index([ownerId], name: "idx_workbooks_owner")
  @@index([lastAccessed], name: "idx_workbooks_last_accessed")
  @@index([isPublic], name: "idx_workbooks_public")
  @@map("workbooks")
}

model Action {
  id          String   @id @default(cuid())
  type        String   // Type of action (e.g., "cell_update", "formula_change", "ai_action")
  data        Json     // Action-specific data
  oldSnapshot Json?    // Previous state for undo functionality
  newSnapshot Json?    // New state after action for redo functionality
  confidence  Float?   // AI confidence score (0.0 - 1.0)
  applied     Boolean  @default(false) // Whether action has been applied
  message     String?  // Human-readable description of the action
  costEstimate Float?  // Estimated cost in credits
  workbookId  String
  userId      String
  createdAt   DateTime @default(now())

  // Relations
  workbook Workbook @relation(fields: [workbookId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([workbookId], name: "idx_actions_workbook")
  @@index([userId], name: "idx_actions_user")
  @@index([createdAt], name: "idx_actions_createdAt")
  @@index([type], name: "idx_actions_type")
  @@map("actions")
}

model ConversationMessage {
  id          String   @id @default(cuid())
  workbookId  String   // Which workbook this conversation belongs to
  userId      String   // Who initiated the conversation (for context)
  role        String   // "user", "assistant", or "system"
  content     String   @db.Text // The actual message content
  metadata    Json?    // Additional data (operations, token usage, plan ID, etc.)
  createdAt   DateTime @default(now())

  // Relations
  workbook Workbook @relation(fields: [workbookId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([workbookId, createdAt], name: "idx_conversations_workbook_time")
  @@index([userId], name: "idx_conversations_user")
  @@map("conversation_messages")
}

model WorkbookTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?
  data        Json     // Template spreadsheet data
  metadata    Json?    // Template-specific metadata
  isPublic    Boolean  @default(false)
  isOfficial  Boolean  @default(false) // Official templates by the platform
  usageCount  Int      @default(0) // Track template popularity
  createdBy   String?  // User who created the template
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes
  @@index([category], name: "idx_templates_category")
  @@index([isPublic], name: "idx_templates_public")
  @@index([isOfficial], name: "idx_templates_official")
  @@index([usageCount], name: "idx_templates_usage")
  @@map("workbook_templates")
}